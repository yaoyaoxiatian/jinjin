Tomcat优化时，要不断的去测试适合当前环境的配置，优化点：1.Tomcat配置     2.JVM参数进行调优


1.禁用AJP服务
     停止tomcat：切换到bin目录通过./shutdown.sh
     找到tomacat解压目录的conf文件夹下，将server.xml当中的AJP服务注释

2.修改tomcat运行模式：server.xml中connector节点的协议配置，默认使用bio，可改为nio，apr
	<Connector executor="tomcatThreadPool"  port="8080" 			protocol="org.apache.coyote.http11.Http11Nio2Protocol"
               connectionTimeout="20000"
               redirectPort="8443" />


3.启动执行器（线程池）
     测试一：最多线程为500，初始为50
<Executor name="tomcatThreadPool" namePrefix="catalina-exec-" maxThreads="500" minSpareThreads="50" prestartminSpareThreads="true"/>

      <Connector executor="tomcatThreadPool"  port="8080" protocol="HTTP/1.1"
           connectionTimeout="20000"
           redirectPort="8443" />

或者：
<Connector port="8080"   
          protocol="HTTP/1.1"   
          maxThreads="1000"   
          minSpareThreads="100"   
          acceptCount="1000"  
          maxConnections="1000"  
          connectionTimeout="20000"   
          maxHttpHeaderSize="8192"  
          tcpNoDelay="true"  
          compression="on"  
          compressionMinSize="2048"  
          disableUploadTimeout="true"  
          redirectPort="8443"  
          enableLookups="false"  
          URIEncoding="UTF-8" />

protocol="org.apache.coyote.http11.Http11Nio2Protocol" 使用java的异步io护理技术,no blocking IO
maxThreads=“600" 表示最多同时处理600个连接最大线程数
minSpareThreads=“100" 表示即使没有人使用也开这么多空线程等待，初始化时创建的线程数
maxSpareThreads=“500" 表示如果最多可以空500个线程，例如某时刻有505人访问，之后没有人访问了，则tomcat不会保留505个空线程，而是关闭5个空的。 一旦创建的线程超过这个值，Tomcat就会关闭不再需要的socket线程。
acceptCount="700" 指定当所有可以使用的处理请求的线程数都被使用时，可以放到处理队列中的请求数，超过这个数的请求将不予处理


4.内存优化：
配置java内存，启用G1垃圾收集器，在bin/catalina.bat中增加配置：
set JAVA_OPTS="-XX:+UseG1GC -XX:MaxGCPauseMillis=100 -Xms512m -Xmx1024m -XX:NewSize=64m -XX:MaxNewSize=256m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintHeapAtGC"

-server参数：表示以服务模式启动，启动速度会稍微慢一点，但性能会高很多。不加这个参数，默认是以客户端模式启动。
java.awt.headless=true参数：与图形操作有关，适用于linux系统。如生成验证码，含义是当前使用的是没有安装图安装图形界面的服务器，应用中如果获取系统显示有关参数会抛异常。
-XX:PermSize设置永久代初始值，默认是物理内存的1/64。java1.8以后不起作用了，改成了元空间，对应参数-XX:MetaspaceSize
-XX:MetaspaceSize，初始空间大小，达到该值就会触发垃圾收集进行类型卸载，同时GC会对该值进行调整：如果释放了大量的空间，就适当降低该值；如果释放了很少的空间，那么在不超过MaxMetaspaceSize时，适当提高该值。
-XX:MaxMetaspaceSize，最大空间，默认是没有限制的。
XX:MaxPermSize设置最大非堆内存的大小，默认是物理内存的1/4。java1.8以后不起作用了，改成了元空间，对应参数 -XX:MaxMetaspaceSize
-Xms、-Xmx：JVM内存设置（堆内存）。
ps：这两组最好设置成一样的，避免上下文切换消耗资源。JDK8+永久代已经换成了元空间，PermSize MaxPermSize这两个参数没用了。
-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/path oom时打印dump文件到指定路径







